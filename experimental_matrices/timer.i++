/*
  This high-resolution timer is able to measure the elapsed time with
  one micro-second accuracy

  Author: Song Ho Ahn (song.ahn@gmail.com) Â© 2003, 2006
*/

#include <stdlib.h>

// constructor

timer::timer() {
  startCount.tv_sec = startCount.tv_usec = 0;
  endCount.tv_sec = endCount.tv_usec = 0;
  stopped = 0;
  startTimeMicroSec = 0;
  endTimeMicroSec = 0;
}

// destructor

timer::~timer() {
}

// start timer; startCount will be set at this point

void timer::start() {
  stopped = 0; // reset stop flag
  gettimeofday(&startCount, nullptr);
}

// stop the timer; endCount will be set at this point

void timer::stop() {
  stopped = 1; // set timer stopped flag
  gettimeofday(&endCount, nullptr);
}

// multiply elapsedTimeMicroSec by 1000

double timer::getElapsedTimeNanoSec() {
  return getElapsedTimeMicroSec() * 1000.0;
}

// compute elapsed time in micro-seconds
// other routines will call this, then convert to specific resolution

double timer::getElapsedTimeMicroSec() {
  if (not stopped) {
    gettimeofday(&endCount, nullptr);
  }
  startTimeMicroSec = (startCount.tv_sec * 1000000.0) + startCount.tv_usec;
  endTimeMicroSec = (endCount.tv_sec * 1000000.0) + endCount.tv_usec;
  return endTimeMicroSec - startTimeMicroSec;
}

// divide elapsedTimeMicroSec by 1000

double timer::getElapsedTimeMilliSec() {
  return getElapsedTimeMicroSec() * 0.001;
}

// divide elapsedTimeMicroSec by 1000000

double timer::getElapsedTimeSec() {
  return getElapsedTimeMicroSec() * 0.000001;
}

// same as getElapsedTimeSec()

double timer::getElapsedTime() {
  return getElapsedTimeSec();
}
